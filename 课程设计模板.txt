
 

专业技能训练
综合报告
2025～2026学年第一学期


题目	基于Express.js框架的旅游网站
院  (系):	软件学院
姓名	郭伟论
学号	221070006
专业班级	2022级计科二班
指导教师	李玮瑶

2025 年10 月 28 日

综合报告	总分
目标1(20)	目标2(20)	目标3(20)	目标4(20)	目标5(20)	
					

 

综合报告 任务书
一、考核目标
1. 理解软件系统的分析和设计任务，能够完成分析和设计任务，并综合考虑社会、健康、安全、法律、文化以及环境等制约因素。
2. 理解课题的调研方法，能够进行合理的工程背景分析，阐明工程的意义及影响，分析和评价解决方案产生的社会、健康、安全、法律和文化影响，并在工程实践中理解应承担的社会责任。
3. 具有良好的身心素质，能够按照计划通过团队协作完成需求分析和系统设计的验证和完善工作。
4. 理解软件工程项目涉及的管理原理与经济决策方法，能够做出合理且可行的软件工程项目进度和参与人员相关的决策。
5. 在多学科环境下合理运用工程管理与经济决策方法进行实践，能够确保在计划的时间内完成相应的工程设计，并以周报的形式清晰地记录项目进展情况。
二、任务要求
1．提交方式：学习通
2．提交时间：2025年10月30日前
3．提交内容：综合报告电子版
三、评分标准
观测点	评价标准	得分
系统的分析和设计任务完成情况，分析和设计过程中综合考虑社会、健康、安全、法律、文化以及环境等制约因素的情况。（针对课程目标1考核，占总分权重20%）	能够在相关制约因素下完成系统的分析和设计，分析和设计文档及图表规范、完整。	18-20分
	系统的分析和设计结果与相关制约因素不冲突，分析和设计文档和图表较为规范、完整。	14-17分
	系统的分析和设计结果与相关制约因素基本不冲突，分析和设计文档和图表基本规范或存在少量缺失。	12-13分
	系统的分析和设计结果与相关制约因素存在冲突，分析和设计文档和图表不规范、不完整。	0-11分
工程背景、研究现状、研究内容、研究方法与思路、对社会责任的理解程度。（针对课程目标2考核，占权重20%）	背景定位准确、研究现状分析充分、内容完整、方案设计合理、对应承担的社会责任表达清晰全面。	18-20分
	背景定位较准确、研究现状分析较充分、内容较完整、方案设计较合理、对应承担的社会责任表达较清晰。	14-17分
	背景定位与选题有一定关联、研究现状分析不够充分、内容不够完整、方案基本合理、能够体现应承担的社会责任。	12-13分
	背景定位与选题无关，未能有效分析研究现状、内容缺失较多、方案不合理、未能表述应承担的社会责任。	0-11分
团队合作验证项目需求分析和系统设计的情况。（针对课程目标3考核，占权重20%）	经过团队深度交流，所获取的项目需求准确完整，所撰写的设计方案合理完整。	18-20分
	经过团队较深入地交流，所获取的项目需求准确合理，所撰写的设计方案完整。	14-17分
	经过团队交流，所获取的项目需求基本合理，所撰写的设计方案基本合理。	12-13分
	没有团队交流，所获取的项目需求存在明显的不合理，所撰写的设计方案存在明显的缺失。	0-11分
项目计划，人员和进度管理。（针对课程目标4考核，占权重20%）	能够综合不同的角色、人员、任务、时间等资源制定合理可行的项目计划。	18-20分
	能够较好地综合不同的角色、人员、任务、时间等资源制定合理的项目计划。	14-17分
	基本能够综合不同的角色、人员、任务、时间等资源制定基本合理的项目计划。	12-13分
	未能综合不同的角色、人员、任务、时间等资源制定项目计划。	0-11分
项目按时完成情况，周报填写完整度。（针对课程目标5考核，占权重20%）	项目能够按时完成，周报记录准确完整，能简明扼要地阐述项目的主要内容，思路清晰合理。	18-20分
	项目能够按时完成，周报记录完整，能较好地阐述项目的主要内容，思路较清晰。	14-17分
	项目经短期延期后能够完成，周报记录较完整，能基本阐述项目将的主要内容，思路基本通顺。	12-13分
	项目经延期后仍无法完成，周报记录不完整，项目基本内容阐述比较模糊，思路不够通顺。	0-11分
总分	100
 
目  录
1 项目分析	1
1.1 项目背景	1
1.2 研究现状	3
1.3 研究内容	4
1.4 研究方法与思路	6
1.5 社会影响	6
1.6 承担责任	8
2 系统设计	10
2.1 需求分析	10
2.2 总体设计	16
3 团队协作	18
3.1 团队计划表	18
3.2 团队协作表	20
3.3 个人在团队协作中的主要工作	21
3.4 团队协作记录	25
4 项目进度	26
4.1 项目进度表	26
4.2 人员决策	27
5 项目周报	30

 
1 项目分析
1.1 项目背景
在数字化浪潮席卷全球的当下，现如今正是信息化发展的黄金阶段。从智能手机的全民普及到家用电脑的广泛覆盖，再到智能平板、智能手表等各类电子产品不断融入日常生活，人们的行为习惯与生活方式已发生深刻变革 —— 无论是线上购物、远程办公，还是在线学习、政务办理，越来越多人倾向于通过这些新型智能设备解决衣食住行等各类日常生活问题，“指尖办事”“线上生活” 已成为主流趋势。
社区作为城市群众生活的基础单元，是居民日常活动的核心场景，其人、事、物高度交融：从居民的户籍信息、家庭构成，到社区内的物业维修、治安巡逻、环境整治，再到公共设施的使用、社区活动的组织，每一项事务背后都以人为根本产生着海量数据。随着居民对生活品质要求的提升，社区承担的责任与服务也愈发多元，不仅要保障基础的居住安全与环境整洁，还需提供文化娱乐、养老托育、健康医疗等多元化服务。然而，传统单一的社区服务管理体系，仍停留在 “人工登记、纸质存档、口头通知” 的模式，已难以跟上居民对高质量生活的需求步伐。加之信息数据更新速度极快 —— 居民户籍变动、房屋租赁信息更新、车辆进出登记等数据每日都在变化，这极大地增加了社区管理人员的工作量，让原本就繁琐的工作更显沉重。
若仍依赖以往的手工方式记录和维护这些信息数据，弊端更是显而易见：管理人员需逐笔填写纸质表格，分类存档至不同文件夹，查询时需在堆积如山的档案中逐一翻找，不仅工作琐碎、任务繁重，严重浪费时间与人力；人工记录过程中还易出现字迹模糊、数据写错、信息遗漏等问题，不利于信息数据的长期安全存储与及时更新，甚至可能因数据差错影响社区服务的精准性，例如漏登居民报修信息导致维修延误，错记车辆信息引发停车纠纷等。因此，结合当下网络技术的飞速发展，构建功能更齐全、操作更便捷的社区便民服务平台，已成为契合居民日常生活需求、破解社区管理困境的必然选择。
与此同时，随着我国社会经济的蓬勃发展，社区服务作为第三产业的重要组成部分，展现出巨大的发展空间与潜力。尤其是改革开放以来，国家高度重视民生建设，社区服务建设逐渐成为国家民生工程的核心内容之一 —— 从 “十五” 规划提出 “健全社区服务体系”，到 “十四五” 规划强调 “推进智慧社区建设”，政策层面的持续支持为社区服务发展注入强劲动力，使其发展前景愈发广阔。尽管近年来国内社区便民服务信息化工作取得了长足进步，不少社区告别了纯手工办公模式，但从整体来看，管理效率低、服务内容不完善、信息共享不及时等问题仍较为突出：部分社区虽引入信息化工具，但各系统数据不互通，形成 “信息孤岛”；服务内容多集中于基础通知发布，缺乏针对居民个性化需求的定制化服务；居民与社区间信息传递滞后，导致重要通知遗漏、居民诉求难以及时反馈。如何运用大数据、云计算、移动互联网等现代化信息技术，实现社区高效管理与满足居民日常生活需求的双重目标，已成为当前社区治理领域亟待解决的重要课题。
回溯社区便民服务平台的发展历程，传统模式的局限性尤为明显。早期的社区便民服务平台，几乎完全采取纸质化办公的形式：居民信息登记需填写多份纸质表格，后续整理归档需耗费大量人力；社区办事业务流程，如居住证办理、低保申请等，需居民多次跑腿提交纸质材料，工作人员手工审核、逐级上报；社区信息发布则依赖公告栏张贴通知，不仅覆盖范围有限，还易因风吹雨淋导致信息模糊。这种模式不但耗时耗力、出错率高，更直接导致服务效率低下，居民满意度普遍不高。
近几年来，随着信息化技术的快速发展，部分社区开始意识到技术赋能的重要性，引入了比较专业的社区便民服务管理软件。这些软件能够对社区日常工作中涉及的居民信息管理、事务审批、报修处理等事务进行系统化管理，无需再依赖人工逐笔记录，一定程度上减少了工作失误，提高了管理与服务效率。然而，这些早期软件大多采用 C/S（客户端 / 服务器）架构，尽管该架构在数据交互、功能定制方面具有一定优势，交互性相对强大，但使用局限性却十分显著 —— 用户必须在安装了对应客户端软件的特定计算机上才能登录使用，一旦更换设备或身处外地，便无法及时处理社区事务。对于需要频繁外出巡检、上门服务的社区工作人员，以及习惯通过手机等移动设备获取信息的居民而言，这种架构的不便性尤为突出。
相比之下，目前主流的社区物业或管理部门，都会优先选择流行的 B/S（浏览器 / 服务器）架构来设计社区服务系统。该架构的核心优势在于 “无客户端依赖”，用户只需通过任意一台连接互联网的设备（无论是电脑、手机还是平板），打开浏览器输入对应网址，即可登录系统使用各项功能，无需额外安装软件，极大地提升了使用的便捷性。同时，从系统维护与后期发展来看，B/S 架构的系统维护工作主要集中在服务器端，无需逐一更新客户端，大幅降低了维护成本；后续若需新增功能模块或优化服务流程，也只需对服务器端进行升级，再开发难度更低，更能适应社区服务不断变化的需求。
即便如此，国内大多数社区便民服务平台仍存在诸多亟待改进的问题。其中最为核心的，便是未能真正立足居民需求，缺乏 “以居民为中心” 的服务理念：不少平台的功能设计更偏向于满足管理人员的工作需求，如数据统计、事务审批等，而针对居民日常生活所需的服务，如家政预约、邻里社交、闲置物品交换等，要么功能缺失，要么体验不佳。更重要的是，多数平台未能有效搭建居民与社区管理者之间的互动桥梁，居民只能被动接收社区发布的信息，却难以通过平台及时反馈诉求、参与社区议事；管理人员也无法快速获取居民的意见建议，导致双方沟通存在明显壁垒。这直接导致部分居民对社区服务平台的关注程度并不高，甚至从未使用过平台功能。
此外，从整体市场现状来看，真正完整有效、能够覆盖居民全场景需求的社区便民服务平台还十分稀缺。目前存在的很多平台，要么功能单一，仅能满足某一项或几项基础服务；要么操作流程复杂，界面设计混乱，老年居民等群体难以快速上手；要么存在严重的 “信息壁垒”，平台内的数据无法与街道政务系统、周边商业服务平台等实现共享，居民查询不同类型信息仍需切换多个平台，共享性相对较低。这些平台在设计过程中，往往忽略了社区人员构成的多样性 —— 既有熟悉数字技术的年轻人，也有对智能设备操作不熟练的老年人、残疾人等群体，未能充分考虑不同人群的使用方便性，导致平台的普及度与使用率始终难以提升。
综上所述，无论是从信息化时代的发展趋势、社区管理的现实困境，还是居民对高质量服务的迫切需求来看，当前都迫切需要打造一款操作简单、功能完善、以居民为核心的社区便民服务平台。这款平台不仅要具备高效的管理功能，更要覆盖居民日常生活的各类需求，实现居民与社区的无缝互动，真正为社区管理人员减负、为社区居民带来更大的便利，推动社区治理向更智能、更人性化的方向发展。

1.2 研究现状
社区便民服务平台在国内外均有广泛的研究与应用，国外起步较早，技术和服务模式较为成熟，而国内近年来发展迅速，在本地化服务和技术创新方面表现突出。以下是具体的研究现状：
国外研究现状
技术应用成熟：国外在相关技术应用方面相对成熟，乡镇社区服务平台的设计和开发更注重用户体验和个性化服务。如 ESRI 公司提出 “通过 Web 按需访问 Springboot 数据和功能” 的理念，为智慧社区建设提供新思路。Pitney Bowes MapInfo 的 Springboot 解决方案可提供地理位置分析等功能。
平台功能完善：许多发达国家已建立完善的智慧社区平台，功能涵盖物业管理、居民服务、社区安全等多方面。例如美国的智慧社区服务平台覆盖面超过 60%，提供智能家居、健康管理、社区安全等服务，深受居民欢迎。
注重数据安全与特殊群体服务：国外学者针对社区服务平台展开了诸多研究，如英国学者 Johnson（2024）采用区块链技术保障社区服务平台的数据安全和隐私。美国学者 Smith（2022）运用物联网技术和大数据分析技术，收集老年人健康数据，为其提供个性化健康服务建议。日本学者 Tanaka（2023）开发智能客服系统，通过自然语言处理技术为老年人提供生活咨询等服务。
国内研究现状
建设试点广泛开展：随着智慧城市建设推进，北京、上海、广州等一线城市率先开展社区便民服务平台建设试点。上海市一些社区打造 “一站式” 服务平台，实现政务、公共和生活服务有机融合。
功能与服务内容丰富：国内平台功能日益多样化，除传统政务和公共服务外，还增加了社区电商、家政、养老等生活服务内容。同时，注重社区文化建设和居民互动交流，通过开设社区论坛等方式增强居民联系。
技术创新活跃：国内社区便民服务平台在技术创新方面较为活跃，广泛应用人工智能、大数据等技术。例如基于 Springboot 的乡镇社区服务平台已应用于社区规划、治安管理等领域。还有学者研究通过微信小程序开发社区便民服务系统，以实现国家倡导的智能化社区建设。
关注特殊群体需求：国内学者也关注到特殊群体需求，如针对人口老龄化问题，有学者采用人工智能和物联网融合技术，构建智能养老社区模型，通过物联网设备收集老年人行为数据，利用人工智能算法分析预测，以提供个性化服务，提升社区养老服务智能化水平。

1.3  研究内容
1、调研对象与范围界定
①核心对象：覆盖社区不同群体（老年人、上班族、宝妈、残疾人等），重点调研 “高频需求痛点”（如老年人不会线上缴费、上班族没时间办理社区证明、宝妈需要临时托育信息）；
②辅助对象：社区工作人员（居委会、物业）、周边便民商户（便利店、家政公司、药店、维修点），了解服务供给端的现存问题（如社区通知触达率低、商户与居民对接效率低）。
2、需求调研方法与内容
①调研方法：采用 “线上问卷（覆盖 80% 以上居民）+ 线下访谈（针对老年人等不熟悉线上操作的群体）+ 社区数据分析（近 1 年居民咨询记录、投诉问题）” 结合的方式；
②核心调研内容：
居民端：日常高频需求类型（生活缴费、政务办理、邻里互助、便民服务预约、应急帮助等）、使用平台的设备偏好（手机小程序、电脑端、社区线下终端机）、对服务响应速度的期待（如报修后希望几小时内反馈）；
供给端：社区工作人员的服务痛点（如通知需逐户电话确认、纸质材料存档杂乱）、商户的合作意愿（如是否愿意入驻平台提供优惠服务、需要平台提供哪些支持）。

3、平台核心功能模块设计
①生活便民服务：
线上缴费：支持水、电、气、物业费一键缴纳，关联居民家庭住址自动匹配缴费账户，提供缴费记录查询与提醒（如 “电费余额不足 50 元” 推送）；
便民预约：涵盖家政服务（保洁、保姆）、维修服务（家电、水管、门窗）、社区医疗（家庭医生问诊预约、疫苗接种提醒），支持按 “距离远近”“用户评分” 筛选服务商，预约后可实时查看服务人员位置与预计到达时间；
应急帮助：设置 “一键求助” 按钮（老年人版本支持大字、语音操作），可快速联系社区居委会、物业或周边药店（如突发疾病时，推送 “300 米内 24 小时药店” 信息），同时支持家属绑定账号，接收求助通知。
②社区政务与通知：
政务办理：提供社区证明（居住证明、疫苗接种证明）在线申请、进度查询，支持上传材料（身份证照片）、线下自取或邮寄；
通知公告：按 “重要程度” 分类推送（如 “停水停电通知” 标红置顶、“社区活动通知” 常规展示），支持 “已读确认”（社区工作人员可查看居民阅读率，未读居民可二次电话提醒）。
③邻里互助与资源对接：
邻里求助：居民可发布短期需求（如 “临时需要借用轮椅”“孩子放学后需要临时看管 1 小时”），其他居民或社区志愿者可接单响应；
便民资源查询：整合社区周边资源地图（便利店、药店、菜市场、幼儿园、养老院），标注营业时间、联系电话、是否支持 “送货上门”（如药店支持 “24 小时送药” 标注）。
服务管理：社区工作人员可审核入驻商户资质、处理居民报修工单（如 “电梯故障” 工单分配给维修人员，实时更新进度 “已派单 - 维修中 - 已完成”），查看服务满意度评价（居民可对维修、家政服务打分）；
数据统计与分析：自动统计高频需求（如 “每月报修 TOP3：电梯故障、水管漏水、电路问题”）、居民活跃度（如 “60 岁以上居民使用率 35%”），为社区优化服务提供数据支撑（如针对 “电梯故障多” 增加维保频次）；
权限管理：区分 “居民账号（仅查看个人相关信息）”“社区工作人员账号（管理工单与通知）”“管理员账号（配置平台功能、管理所有数据）”，确保数据安全（如居民缴费记录仅本人可见）。
商户入驻与管理：提供在线入驻申请，审核通过后可管理店铺信息（服务项目、价格、营业时间）、接收订单、回复用户评价，平台提供 “交易担保”（居民付款后暂存平台，服务完成确认后再打给商户）；
服务监管：设置服务商评分体系（基于服务质量、响应速度、用户反馈），评分低于 3 星的服务商暂停入驻资格，定期公示 “优质服务商名单”，引导良性竞争。
4、技术选型与平台适配设计
①技术栈选型（兼顾 “实用性” 与 “成本控制”）
开发模式：采用 “小程序 + 后台管理系统” 模式（居民端用微信小程序，无需额外下载 APP；社区管理端用 Web 后台，适配电脑操作），降低居民使用门槛与开发成本；
后端技术：选用 Spring Boot 框架（成熟稳定、开发效率高），数据库用 MySQL（存储居民信息、订单数据、缴费记录），缓存用 Redis（提升缴费、查询功能的响应速度）；
前端技术：居民端小程序用微信原生开发（适配微信生态，老年人更熟悉微信操作），管理端 Web 用 Vue+Element UI（界面简洁、易于维护）；
第三方接口集成：对接官方缴费接口（水电气暖）、地图接口（腾讯地图 / 高德地图，实现服务商定位）、短信接口（用于验证码、求助通知），确保功能合法性与稳定性。
②多场景适配设计（重点关注 “老年人友好”）
界面适配：提供 “常规版” 与 “老年版” 切换，老年版采用大字（字体放大 20%）、高对比度（黑底黄字）、简化操作（减少跳转步骤，如 “缴费” 仅需 2 步：选择缴费类型→确认支付），屏蔽复杂功能（如不显示 “评分筛选”“个性化推荐”）；
操作适配：支持语音操作（如老年版可语音输入 “缴电费”“报修水管”）、线下辅助（社区设置 “平台使用指导点”，志愿者协助老年人完成注册与操作）；
设备适配：除手机小程序外，在社区服务中心设置 “线下终端机”（带触控屏、身份证读卡器），老年人可凭身份证登录，办理缴费、查询等业务，终端机旁配备操作指南海报。  5、数据安全与隐私保护设计
居民数据加密：对身份证号、银行卡号等敏感信息采用加密存储，传输过程用 HTTPS 协议，避免数据泄露；
权限控制：严格限制数据访问权限（如社区工作人员仅能查看本社区居民的报修信息，无法查看缴费记录），定期进行数据备份（防止数据丢失）；
合规性确认：符合《个人信息保护法》要求，用户注册时明确告知 “数据用途”（如 “手机号用于接收验证码与求助通知”），提供 “隐私设置”（如可关闭 “个性化推荐” 功能）。

1.4  研究方法与思路
1、研究内容以及系统分析阶段：本阶段会阅读一些文献，收集现有游戏信息平台的资料，分析玩家对游戏信息APP的功能需求，进而明确APP功能模块划分。
2、需求分析：本阶段将详细列出APP的各功能模块需求，包括基本功能、性能要求、界面设计等，为后续的系统设计提供详细的需求文档。
3、系统设计阶段：本阶段将进行系统架构设计，确定数据库结构，设计用户界面，并规划推荐算法，确保APP的设计满足功能和性能需求。
4、程序编码阶段：本阶段将按照设计文档进行编码实现，遵循编程规范，同时进行单元测试，确保每个模块的功能正确无误。
5、软件测试阶段：本阶段将通过功能测试、体验测试和安全性测试，全面检验APP的质量，确保能够稳定运行。

1.5  社会影响
基于社区便民服务平台的设计背景、功能迭代与应用价值，其项目落地不仅能破解传统社区治理困境，更能在社会、健康、安全、法律、文化等多领域产生深远影响，具体如下：
1、社会影响：优化社区治理，促进社会和谐
提升社区治理效率，缓解管理压力：平台通过数字化手段替代手工记录，整合居民信息、事务审批等功能，解决了传统管理中“耗时耗力、易出错”的问题，大幅减少社区管理人员的工作量，使治理从“经验型”转向“精准型”，提升基层治理效能。
打破沟通壁垒，构建邻里共同体：平台搭建起居民与管理者、居民与居民之间的互动桥梁——居民可在线反馈诉求、参与社区议事，还能通过活动模块报名、交流，破解现代社区“邻里相望不相识”的困境，增强社区归属感，助力构建和谐社会单元。
推动资源共享，惠及特殊群体：平台以“居民为中心”设计服务，覆盖家政预约、养老托育等多元需求，且B/S架构支持多设备访问，方便老年居民、残疾人等群体通过简单操作获取服务，减少数字鸿沟，使社区服务更具包容性，促进社会公平。
2、健康影响：营造健康环境，关注居民身心需求
减少线下聚集，降低健康风险：平台实现“线上办事”，居民无需多次跑腿提交材料、参与线下登记，尤其在疫情等特殊时期，可通过平台完成报修、缴费、信息查询等操作，减少人员聚集，降低疾病传播风险。
丰富健康服务，助力身心管理：平台可整合社区健康医疗资源，发布老年健康讲座、亲子健康活动等信息，居民可在线报名参与；同时，管理者能通过数据分析识别居民健康需求，如针对老年群体推送体检提醒，助力居民建立健康生活方式，关注身心双重健康。
3、安全影响：强化社区安防，保障信息与生活安全
规范数据管理，保障信息安全：平台替代传统纸质档案，通过服务器端备份、权限管理等功能，避免“数据丢失、篡改”等问题，且集中化存储居民信息，减少因纸质档案泄露导致的隐私安全风险，符合信息化时代数据安全管理要求。
提升应急响应，保障生活安全：平台支持实时信息传递，如遇火灾、水管爆裂等突发情况，居民可通过平台快速上报，管理者能实时调度维修、安保人员，缩短应急处理时间；同时，车位管理、陌生人登记等功能可辅助社区安防，减少治安隐患，保障居民生活安全。
4、法律影响：合规管理数据，明确权责边界
遵循数据法规，规范信息采集：平台在收集、存储居民信息时，需遵循《个人信息保护法》等相关法律要求，明确信息采集范围与用途，避免过度收集隐私数据，保障居民合法权益，推动社区管理法治化。
明确事务权责，减少法律纠纷：平台将社区办事流程线上化，每一步操作均有数据记录，如报修处理进度、事务审批节点等可追溯，避免传统手工管理中“责任推诿”问题，明确居民与管理者的权责边界，减少因流程不规范引发的法律纠纷。
5、文化影响：传承社区文化，丰富精神生活
挖掘社区文化，增强文化认同：平台可设置“社区文化”模块，展示社区历史沿革、邻里榜样事迹、传统节日活动等内容，让居民通过平台了解社区文化，传承本土文化记忆，增强对社区的文化认同与自豪感。
丰富文化活动，满足精神需求：平台定期发布多元文化活动信息，如书法展览、节日联欢、非遗体验等，居民可便捷报名参与，打破传统活动“通知范围有限”的局限，让更多人接触丰富的文化内容，满足居民精神文化需求，助力社区文化建设蓬勃发展。

1.6  承担责任
基于社区便民服务平台的社会、健康、安全、法律、文化多维度影响，计算机编程人员作为项目开发核心参与者，需围绕功能实现、风险防控、价值落地承担多方面责任，具体可分为以下六大核心维度： 
1、功能开发责任：保障平台实用性与易用性，契合社区多元需求 
① 精准落地核心功能：需依据社区管理与居民生活需求，完整实现信息管理、事务处理、互动交流、服务对接等核心模块，如确保居民端“报修跟踪”“活动报名”功能流畅，管理员端“数据统计”“流程审批”功能高效，避免因功能缺失或逻辑漏洞影响平台使用价值。    
② 优化多端适配与操作体验：考虑到社区用户包含老年人、残疾人等群体，需重点优化B/S架构的多设备适配性（支持电脑、手机、平板流畅访问），同时简化操作流程——如设计清晰的界面导航、放大关键按钮、提供操作指引弹窗，降低数字门槛，确保不同年龄段、技术熟练度的用户都能便捷使用。 
③ 预留功能扩展空间：开发时需采用模块化设计，为后续新增服务（如健康医疗对接、周边商户合作）预留接口，避免因架构限制导致平台难以迭代升级，保障平台长期适配社区服务的多元化发展。
2、数据安全责任：守护信息安全，防范隐私泄露风险 
①构建全流程数据安全体系：在数据采集环节，严格按照“最小必要”原则设计字段，避免过度收集居民隐私信息（如非必要不采集身份证号、家庭详细住址等敏感数据）；存储环节采用加密算法（如对称加密、非对称加密）保护数据，定期进行服务器备份，防止数据丢失；传输环节通过HTTPS协议确保数据传输安全，避免中途被窃取或篡改。 
② 设置精细化权限管理：针对不同角色（居民、管理员、维修人员等）设计差异化权限，如居民仅可查看本人信息与公共通知，管理员需经多层认证才能修改核心数据，防止因权限混乱导致数据泄露，同时留存操作日志，确保数据操作可追溯。
③应对安全漏洞与攻击：开发过程中需进行常态化漏洞检测（如SQL注入、XSS跨站脚本攻击防护），上线后配合运维团队及时修复安全补丁，避免因程序漏洞引发数据泄露、平台瘫痪等问题，保障居民信息与平台运行安全。 
3、法律合规责任：遵循法规要求，保障开发与使用合法 
①严格遵守数据相关法律：以《个人信息保护法》《网络安全法》为准则，在平台中设置“隐私政策”弹窗，明确告知居民信息采集目的、用途与存储期限，获取用户授权后方可收集数据；同时提供数据查询、修改、删除功能，保障居民的知情权与控制权，避免因违法收集、使用数据引发法律纠纷。 
②确保流程合规与可追溯：将社区办事流程（如居住证办理、低保申请）的法律要求转化为程序逻辑，确保线上流程与线下合规流程一致，且每一步操作均生成可追溯记录（如审批人、审批时间、操作内容），满足法律对事务处理“留痕管理”的要求，减少权责纠纷。 
4、社会价值责任：助力社区治理，体现便民与公平 
①优先保障民生关键功能：开发时需将“便民”作为核心导向，优先实现居民高频需求功能（如物业费缴纳、车位查询、紧急报修），确保平台能切实解决居民日常生活痛点，避免开发“华而不实”的功能，浪费资源且脱离社区实际需求。 
②减少数字鸿沟，保障服务公平：针对老年居民等特殊群体，可开发“长辈模式”（如更大字体、语音导航、简化功能），或预留线下辅助入口（如支持家属代操作、社区工作人员协助使用），避免因技术门槛导致部分居民无法享受平台服务，体现社会公平性。 
5、健康与安全辅助责任：间接助力社区健康与安全管理 
①支持健康相关功能合规开发：若平台包含健康服务模块（如健康讲座报名、体检预约），需确保功能逻辑不涉及医疗诊断、用药建议等超出社区服务范围的内容，仅作为信息对接与活动组织工具，同时保障健康信息（如体检提醒）的隐私安全，避免误导居民或泄露健康数据。 
②辅助强化社区安全功能：在“应急上报”“陌生人登记”等安全相关功能开发中，需确保信息传递实时性（如上报后自动推送至对应管理人员）、数据准确性（如车辆登记信息与公安系统合规对接），避免因程序延迟或数据错误影响社区安全管理效率。
6、文化适配责任：贴合社区文化，助力文化传承与建设 
①适配社区文化展示需求：若平台包含“社区文化”模块，需设计灵活的内容展示形式（如图文、视频、音频），支持管理员上传社区历史资料、文化活动影像等内容，同时确保模块操作简单，方便社区工作人员更新维护，助力社区文化传承。 
②避免文化冲突与不适：在界面设计、文案表述中尊重社区文化习俗（如避免使用可能引发文化误解的图标、语言），针对不同文化背景的社区（如多民族社区）可提供多语言切换功能，确保平台文化适配性，增强居民对平台的认同感。


 
2 系统设计
2.1 需求分析
社区便民服务系统的用户主要面向物业管理员和社区居民用户。社区居民用户需要便捷的查看社区服务通知、社区活动报名、社区车位租用，费用缴费管理、论坛交流、在线咨询等线上服务，物业管理员需要有效的社区服务通知管理、社区活动管理、社区车位管理、费用缴费管理、社区论坛管理等功能，下面是对这两种用户角色的具体功能需求分析，系统需求建模如图2-1。
 
图2-1 系统总体用例图
1.社区用户需要通过社区便民服务平台完成查看社区服务通知、社区活动报名、社区车位租用，费用缴费管理、论坛交流、在线咨询等功能。
（1）查看社区服务通知：社区用户查看服务通知信息时，需要以列表的形式概览所有的服务通知信息，对于感兴趣的目标通知信息，能够查看其详情信息包括通知标题、类型、简介、图片、发布日期、发布人以及具体内容介绍，同时可以对其进行收藏和评论，收藏成功后平台会向用户推荐此类型的服务并显示在最前方。
（2）社区活动报名：社区用户进行活动报名时，需要以列表的形式查看所有活动信息，对想要参加的社区活动能够查看其详情包括活动名称、活动地点、参加人数、活动时间、举办方、联系电话、活动介绍等，然后可以对目标活动进行报名，报名时需要填写报名申请核对个人信息。同时也能实现对活动的收藏和评论。
（3）社区车位租用：社区用户进行车位租用时，需要以列表的形式概览所有的车位信息，对感兴趣的单个车位能够查看其详情主要包括车位名称、车位编号、车位位置、车位状态、租金、车位图片以及车位介绍等信息，对想要租用的社区车位进行租用，租用时需要填写租用备注，核对个人信息。
（4）费用缴费管理：社区用户希望以列表的形式查看具体的缴费详情包括费用名称、费用类型、费用金额、缴费时间、缴费月份、是否支付等，然后对未缴费的项目进行支付，支付时能够选择不同的支付方式，还可以根据不同条件查找缴费信息。
（5）论坛交流：社区用户需要以列表的形式查看所有的帖子信息包括帖子标题、发布人、发布时间，能够根据帖子的标题进行搜索，用户在发布新帖时需要填写标题然后再输入交流内容即可发布，同时还能对其他用户的帖子进行回复。
（6）在线咨询：社区用户可以进入在线咨询，输入要询问的内容，提交咨询信息可以和物业管理员进行在线交流，同时能够查看与物业管理员的聊天记录。
社区用户浏览社区服务通知推荐功能的用例说明如表2-1所示。
表2-1 社区用户浏览社区服务通知推荐用例描述
用例名称	社区用户浏览社区服务通知
参与者	社区用户
用例描述	社区用户浏览社区服务信息
前置条件	社区用户进入社区服务通知列表中

基 本
事件流	1.社区用户进入社区服务通知列表中，浏览推荐的服务通知信息
2.社区用户可以查看到服务通知标题、服务类型、内容简介、发布时间、发布人、具体内容、服务评论
3.选定想要收藏的社区服务内容进行收藏操作
备选事件流	用户尚未完成系统登录操作，收藏服务通知时，自动跳转到用户登录界面
后置条件	收藏成功后，平台向用户推荐该类型的社区服务内容在页面最前方
社区用户报名社区活动功能的用例说明如表2-2所示。
表2-2 社区用户报名社区活动用例描述
用例名称	社区用户报名社区活动
参与者	社区用户
用例描述	社区用户进行社区活动报名操作
前置条件	社区用户进入社区活动列表中

基 本
事件流	1.社区用户进入社区活动列表，浏览活动信息
2.社区用户可以查看到活动名称、活动地点、参加人数、活动时间、举办方、联系电话、点击次数、活动介绍、活动评论
3.选定想要报名的社区活动，填写报名备注
4.进行活动报名操作
备选事件流	社区用户进行活动报名时，如果用户未登录，将会跳转到登录界面
后置条件	社区用户进入社区活动列表对目标活动进行报名操作
社区用户租用社区车位功能的用例说明如表2-3所示。
表2-3 社区用户租用社区车位用例描述
用例名称	社区用户租用社区车位
参与者	社区用户
用例描述	社区用户进行社区车位租用操作
前置条件	社区用户进入社区车位列表中

基 本
事件流	1.社区用户进入社区车位列表，浏览车位信息
2.社区用户可以查看到车位名称、车位编号、车位位置、车位状态、租金、车位内容详细介绍
3.选定需要租用的空闲的车位，选择开始租用时间、填写租用备注
4.进行租用操作
备选事件流	1.社区用户进行车位租用时，如果用户未登录，将会跳转到登录界面
2.目标车位已经被租用，重新租用其他车位
后置条件	社区用户进入社区车位列表对目标车位进行租用操作
社区用户费用缴费管理功能的用例说明如表2-4所示。
表2-4 社区用户费用缴费管理用例描述
用例名称	社区用户费用缴费管理
参与者	社区用户
用例描述	社区用户进入费用缴费页面对日常开销进行支付
前置条件	社区用户成功登录平台

基 本
事件流	1.社区用户进入费用缴费页面，查看费用缴费详情
2.根据不同查询条件，对缴费项目进行查询
3.在费用缴费界面选择未支付项目，进行费用支付，自动跳转到支付界面
4.用户选择支付方式，确认支付
备选事件流	用户尚未完成系统登录操作，自动跳转到登录界面
后置条件	查看缴费详情，成功查询缴费信息，费用支付成功
社区用户提问留言功能的用例说明如表2-5所示。
表2-5社区用户提问留言用例描述
用例名称	社区用户提问留言
参与者	社区用户
用例描述	社区用户进入在线咨询页面与管理员进行交流
前置条件	社区用户进入在线咨询页面
基 本
事件流	1.用户进入在线咨询界面，输入咨询内容然后发送
2.查看问题回复
备选事件流	用户尚未完成系统登录操作，自动跳转到登录界面
后置条件	发送成功后，将本条信息展示给后台管理员
2.物业管理员能够在社区便民服务平台实现社区服务通知管理、社区活动管理、社区车位管理、费用缴费管理、社区论坛管理、用户管理及在线咨询等功能。
（1）社区服务通知管理：物业管理员管理服务通知信息时，要以列表的形式浏览所有的服务通知信息；能够添加服务通知信息，新增时需要填写服务通知的标题、选择通知类型、填写发布人、填写通知简介、上传通知封面、填写具体内容介绍。同时能够根据标题和类型对服务通知信息进行查询，修改服务通知信息项，查看单个通知详情，管理服务通知评论，对服务通知信息进行单个或者批量删除。
（2）社区活动管理：物业管理员在管理社区活动信息时，先以列表的形式概览所有的社区活动信息；能够添加社区活动，添加时需要填写活动名称、活动地点、参加人数、活动时间、举办方、联系电话、活动介绍、上传活动图片，同时也能够修改活动信息项，能够根据活动名称进行查询，查看单个活动详情，管理社区活动评论，对社区活动信息进行单个或者批量删除。
（3）社区车位管理：物业管理员在管理社区车位信息时，需要以列表的形式查看所有的社区车位信息；在新增车位信息时需要填写车位名称、车位编号、车位位置、车位状态、租金、车位详细介绍、上传车位位置图片，同时也能够修改车位信息项，查看单个车位详情，能够根据车位名称或者车位状态进行查询，对社区车位信息进行单个或者批量删除。
（4）费用缴费管理：物业管理员在管理费用缴费信息时，要以列表的形式查看所有的费用缴费信息；在新增缴费信息时需要填写费用名称、费用类型、费用金额、缴费时间、缴费月份、费用描述等信息，同时也能够修改这些缴费信息项，查看单个缴费详情，能够根据缴费类型、缴费月份、用户姓名查询缴费账单，对缴费信息进行单个或者批量删除。
（5）社区论坛管理：物业管理员在管理社区论坛时，希望以列表的形式查看所有的帖子信息；能够对帖子的标题和内容进行修改，查看单个帖子详情，能够根据帖子的标题进行查询，对帖子信息进行单个或者批量删除。
（6）用户管理及在线咨询：物业管理员进入用户管理界面，对社区用户信息进行新增、修改、根据不同条件查询用户信息、单个或者批量删除、为具体用户添加缴费项目；物业管理员可以进入在线咨询，查看用户咨询的问题以及回复状态，对未回复的咨询进行回复，同时能够查看与社区用户的聊天记录。
物业管理员新增社区服务通知信息功能的用例说明如下表2-6所示。
表2-6 物业管理员新增社区服务通知例用例描述
用例名称	物业管理员新增社区服务通知
参与者	物业管理员
用例描述	物业管理员在系统管理界面新增社区服务通知信息
前置条件	管理员在后台登录界面成功登录

基 本
事件流	1.物业管理员输入正确的账号和密码成功登录到物业管理员后台
2.进入后台社区服务通知管理中，通过新增操作，进入到服务信息的填写
3.输入服务通知标题，选择服务类型、填写发布人、上传图片、输入服务简介和具体内容这些数据
4.输入完成后进行提交操作
备选事件流	未完成登录操作的用户不能进行新增社区服务通知信息管理的操作
后置条件	物业管理员理员填写要新增的社区服务通知信息，进行提交
物业管理员新增社区活动信息功能的用例说明如下表2-7所示。
表2-7 物业管理员新增社区活动信息用例描述
用例名称	物业管理员新增社区活动信息
参与者	物业管理员
用例描述	物业管理员在系统管理界面新增社区活动信息
前置条件	物业管理员在后台登录界面成功登录


基 本
事件流	1.物业管理员输入正确的账号和密码成功登录进入到物业管理员后台
2.在社区活动管理中，通过新增操作，进入到社区活动信息填写中
3.输入活动名称、活动地点、参加人数、活动时间、举办方、联系电话、活动介绍、上传活动图片
4.输入完成后进行提交操作
备选事件流	未完成登录操作的用户不能进行新增社区活动信息的操作
后置条件	物业管理员填写要新增的社区活动信息，进行提交
物业管理员新增社区车位信息功能的用例说明如下表2-8所示。
表2-8 物业管理员新增社区车位信息用例描述
用例名称	物业管理员新增社区车位信息
参与者	物业管理员
用例描述	物业管理员在系统管理界面新增社区车位信息
前置条件	物业管理员在后台登录界面成功登录


基 本
事件流	1.物业管理员输入正确的账号和密码成功登录进入到物业管理员后台
2.在社区车位管理中，通过新增操作，进入到社区车位信息填写中
3.输入车位编号、车位名称、车位位置、车位介绍、选择车位状态，上传车位图片
4.输入完成后进行提交操作
备选事件流	未完成登录操作的用户不能进行新增社区车位信息的操作
后置条件	物业管理员理员填写要新增的社区车位信息，进行提交
物业管理员修改费用缴费信息功能的用例说明如下表2-9所示。
表2-9 物业管理员修改费用缴费信息用例描述
用例名称	物业管理员修改费用缴费信息
参与者	物业管理员
用例描述	物业管理员在系统管理界面中修改费用缴费信息
前置条件	物业管理员在后台登录界面成功登录

基 本
事件流	1.物业管理员输入正确的账号和密码成功登录进入到物业管理员后台
2.在费用缴费管理中，通过修改操作，进入到费用缴费信息修改中
3.选择要修改的目标缴费信息项
4.修改完成后进行提交操作
备选事件流	未完成登录操作的用户不能进行修改费用缴费信息的操作
后置条件	物业管理员理员修改目标缴费信息项，进行提交
物业管理员回复留言功能的用例说明如下表2-10所示。
表2-10 物业管理员回复留言用例描述
用例名称	物业管理员回复留言
参与者	物业管理员
用例描述	物业管理员在系统管理界面中回复留言
前置条件	物业管理员在后台登录界面成功登录
基 本
事件流	1.管理员成功登录管理员界面、查看回复状态
2.输入回复内容，然后发送
备选事件流	1.没有填写回复内容就点击回复，系统提示回复内容不能为空
2.未编辑好回复内容可以选择返回，回到在线咨询界面
后置条件	发送成功后，将本条信息展示给提问的社区用户

2.2 总体设计
社区便民服务系统是面向社区用户和物业管理员而设计的，将采用现在流行的B/S系统架构，同时为了操作方便本平台在基于B/S三层设计结构的基础上将业务逻辑层分为两层，一层处理业务外观，另一层处理业务规则，形成四层逻辑设计结构。采用这种四层逻辑设计结构可以使系统的业务外观和业务规则分离，设计思路更清晰，开发过程更简单方便[10]。本社区便民服务平台的系统架构分别为表示层、控制层、业务逻辑层、数据访问层。系统结构详细描述如下。
1.	表示层：本层为四层设计结构中的第一层，为用户提供一种交互式操作的界面，表现层的主要功能是：接收用户输入的数据和显示数据信息[11]。本社区便民服务平台中的表示层设计主要包括社区用户和物业管理员使用Web浏览器中的功能操作入口访问Web服务器中的业务逻辑层，主要是呈现给用户操作界面。如社区服务通知管理界面、社区活动管理界面、社区车位管理界面等等。
2.	控制层：SpringMVC拦截用户请求后，控制层负责处理相关请求。对系统的相关业务进行控制，比如社区用户的登录注册控制、添加社区服务通知信息控制、删除服务通知信息控制、修改服务通知信息控制等。
3.	业务层：负责处理Dao层返回的数据。如社区活动信息添加是否成功、社区车信息删除是否成功、社区论坛信息修改是否成功、社区用户信息是否编辑成功、社区用户咨询信息是否发送成功等。
4.	数据访问层：MyBatis-plus充当数据访问层，负责与MySQL进行数据交互。如社区服务通知信息的增删改查、社区活动信息的增删改查、社区车位信息的增删改查、费用缴费信息的增删查改、社区论坛信息的增删查改、社区用户信息的增删改查等。
系统整体架构如图2-1。
 
图2-1 系统整体架构图
社区便民服务平台主要有六大功能模块，分别为：社区活动管理模块，社区车位管理模块，社区服务通知管理模块，费用缴费管理模块，社区论坛管理模块和用户管理及在线咨询模块。六个大模块包含二十二个小模块，在社区活动管理模块中物业管理员能够管理社区活动信息、活动报名信息、取消报名信息，社区用户可以对目标活动进行报名、取消活动报名。在社区车位管理模块中物业管理员能够管理社区车位信息、车位租用信息、取消租用信息，社区用户可以对空闲车位进行租用、取消车位租用。在社区服务通知管理模块中物业管理员能够管理社区服务通知信息，社区用户能够浏览服务通知推荐、对感兴趣的内容进行收藏、评论服务通知内容。费用缴费管理模块中的功能有物业管理员对缴费项目进行相应的增删改查操作，社区用户可以查询缴费记录，对未缴费的项目进行支付。在社区论坛管理模块中物业管理员对用户发布过的帖子和评论进行管理，社区用户能够发布新帖，按照关键字查询帖子，回复帖子等。用户管理及在线咨询模块中的功能有物业管理员在后台管理界面中管理社区用户信息、回复用户咨询信息，社区用户能够向物业管理人员发送提问留言信息。社区便民服务平台总体功能结构图如图2-2所示。
 
 图2-2社区便民服务平台总体功能结构图
 
3 团队协作
3.1 团队计划表
团队角色：
成员 A：前台开发（负责 UI/UX 设计实现、前端交互、页面适配）
成员 B：后台开发（负责服务器搭建、API 接口开发、数据库设计与维护）
成员 C：智能 AI 算法应用（负责算法选型、模型训练 / 部署、AI 功能集成）

第 1 周：需求分析与技术选型
时间	成员 A（前台）	成员 B（后台）	成员 C（AI 算法）	共同任务
周一至周二	收集用户界面需求，绘制初步原型图	分析业务逻辑，梳理数据流转流程	明确 AI 功能需求（如推荐 / 识别 / 分析等）	召开需求评审会，确认功能清单
周三至周四	确定前端技术栈（如 React/Vue + Tailwind）	确定后端技术栈（如 Python/Java + 框架）	调研适配需求的 AI 模型（开源 / 自研）	制定技术方案文档
周五至周日	细化原型图，输出 UI 设计规范	设计数据库 ER 图，规划 API 接口文档结构	输出 AI 算法方案（数据来源、模型选型）	同步进度，调整任务分工

第 2 周：基础架构搭建
时间	成员 A（前台）	成员 B（后台）	成员 C（AI 算法）	共同任务
周一至周二	创建前端项目骨架，配置开发环境	搭建服务器环境（云服务器 / 本地），初始化项目	搭建 AI 模型开发环境（如 TensorFlow/PyTorch）	确认开发环境兼容性
周三至周四	实现基础页面布局（导航栏、首页框架）	设计数据库表结构，完成建表操作	收集 / 预处理 AI 模型所需的初始数据	同步接口字段定义
周五至周日	开发公共组件（按钮、表单、弹窗等）	开发基础 API 接口（用户认证、数据查询）	完成模型选型，开始搭建基础算法框架	联调前端与后端基础接口

第 3 周：核心功能开发（一）
时间	成员 A（前台）	成员 B（后台）	成员 C（AI 算法）	共同任务
周一至周四	开发用户相关页面（登录 / 注册 / 个人中心）	开发用户管理模块（权限控制、数据存储）	训练 / 优化核心 AI 模型（如分类 / 推荐模型）	确认用户数据与 AI 模型的交互逻辑
周五至周日	实现页面路由与状态管理	开发数据校验与异常处理模块	测试模型精度，优化参数	联调用户模块与后端接口

第 4 周：核心功能开发（二）
时间	成员 A（前台）	成员 B（后台）	成员 C（AI 算法）	共同任务
周一至周四	开发 AI 功能相关前端页面（如交互界面）	开发 AI 服务调用接口，支持数据传输	部署 AI 模型为服务（如 API 接口 / 本地服务）	确认 AI 功能的前后端交互流程
周五至周日	实现前端与 AI 服务的交互逻辑	优化数据库查询性能，处理高并发场景	编写 AI 服务文档，提供调用示例	联调 AI 功能模块
第 5 周：功能完善与集成
时间	成员 A（前台）	成员 B（后台）	成员 C（AI 算法）	共同任务
周一至周三	开发辅助功能页面（如帮助中心、设置）	开发数据统计与日志模块	优化 AI 模型响应速度，处理边缘场景	集成所有模块，形成完整流程
周四至周日	优化页面响应式布局，适配多设备	完善接口文档，添加权限校验	测试 AI 功能在实际场景中的表现	内部测试，记录 bug 清单
第 6 周：测试与优化
时间	成员 A（前台）	成员 B（后台）	成员 C（AI 算法）	共同任务
周一至周三	修复前端 bug（样式、交互、兼容性）	修复后端接口 bug，优化性能	修复 AI 模型误差，提升稳定性	每日同步 bug 修复进度
周四至周日	优化用户体验（加载速度、动画效果）	进行压力测试，优化服务器配置	优化模型部署方式（如轻量化处理）	完成第二轮测试，确认无阻塞性 bug

3.2 团队协作表
核心阶段	具体任务	时间安排（以项目周期 2 周为例）	分工（学生 A/B/C）	协作要点	成果物
1. 任务拆解	1. 一起对照课程要求，明确项目核心功能（如小型数据统计工具需含数据录入、计算、导出功能）2. 拆分 3 个核心任务，确保每人任务量均衡	第 1 天课后（30 分钟，教室 / 图书馆）	共同讨论，无主导者	每人说出能承担的任务，快速达成一致，不纠结细节	《任务拆分清单》（手机备忘录 / 简单文档，写清每人任务）
2. 各自攻坚	1. A：负责核心功能代码编写（如数据计算模块）2. B：负责界面设计 / 数据录入模块（如 Excel 表格设计或简单页面）3. C：负责成果整理与初步测试（如记录 A/B 的进度，初步检查功能）	第 2-10 天（每天课后 1 小时左右）	A：代码；B：设计；C：记录 + 初测	1. 每天晚上微信发 1 条进度（如 “A：完成计算代码 50%”）2. 遇到卡壳，当天在微信群问，另外两人看到后 1 小时内回复	A：代码片段；B：设计稿；C：进度记录表
3. 整合测试	1. 三人碰面，A 将代码与 B 的设计整合，一起调试（如确保数据能从 B 的表格导入 A 的计算模块）2. C 负责模拟使用场景测试，记录 bug（如计算结果错误、数据无法导出），三人一起解决	第 11-12 天（周末，2-3 小时，图书馆）	共同整合，分工调试	优先解决影响核心功能的 bug，小问题（如界面不够美观）可简化处理	能正常运行的项目雏形 + bug 修改记录
4. 成果完善与提交	1. B 优化界面细节（如调整字体、排版）2. A 补充代码注释，确保老师能看懂3. C 整合所有文件（代码、设计稿、测试记录），按课程要求命名（如 “小组 3 - 课程项目 - 数据统计工具”）4. 三人一起核对文件，确认无误后提交	第 13-14 天（课后 1 小时）	A：注释；B：优化；C：整合	提交前一起检查 1 遍，确保没漏文件、命名正确	完整项目文件包（按课程要求格式）+ 简单项目说明（1 页文档，写清功能使用方法）


3.3 个人在团队协作中的主要工作
3.3.1社区活动模块界面设计
社区活动界面的设计思想：社区活动界面主要由上方搜索栏、下方内容区两部分组成。社区用户可以通过在上方的搜索框输入社区活动标题查询活动信息，也可以直接在该页面选择某项社区活动进行查看具体内容，同时社区用户进入详情界面后可以报名和评论该项社区活动等。
1.上方搜索栏包括的控件有编辑框，其中编辑框中显示活动名称四个字，提示用户输入社区活动的标题，下拉列表则显示通知类型，按钮上是查询两个字，用户点击查询按钮进行社区活动搜索。
2.下方内容区主要是放置社区活动信息，包括的控件有图片按钮以及列表框等。其中图片按钮是放置社区活动的图片，列表框则是显示所有的社区活动，所有的社区活动均是上下水平放置。
用户可以在社区活动界面浏览不同的社区活动信息，对活动进行报名、对某项活动进行评论，还可以通过搜索框进行社区活动的精准搜索。社区活动界面设计如图3-1所示。
 
图3-1 社区活动界面设计图
3.3.2社区活动管理模块功能设计
社区活动管理模块具体的功能设计如下：
1.社区用户可以在社区活动页面显示活动信息的列表界面中查看所有的社区活动信息，也可以通过在上方的搜索框输入自己想要搜索信息的关键词，点击查询按钮进行搜索，然后选择某个社区活动信息可以查看该活动详情。
2.在查看某个活动详细信息的过程中遇到想要参加的社区活动时，用户可以点击报名，对该活动项目进行报名；对活动报名信息进行查询，在审核通过后，可以对活动报名进行取消，对取消报名信息进行查询以及查看审核情况。
3.社区用户可以对感兴趣的社区活动进行评论，也能对社区活动进行收藏。
4.物业管理员对社区活动信息进行增、删、查、改操作。所谓的增删查改是物业管理员添加或修改某一个社区活动的活动名称、活动地点、开始时间、结束时间、举办方、内容等，删除就是对社区活动进行单个或批量删除。还可以审核和管理社区用户的活动报名信息、取消报名信息。
社区活动模块主要由ShequhuodongEntity、ShequhuodongController、ShequhuodongService、ShequhuodongServiceImpl和ShequhuodongDao这五个类构成，ShequhuodongController类中定义了对社区活动的修改、对社区活动的添加、对社区活动的删除、对社区活动的查找等方法，ShequhuodongController类中的方法分别调用ShequhuodongService类中对应的方法，ShequhuodongService类中的方法分别调用ShequhuodongServiceImpl类中对应的实现方法对社区活动进行相对应操作，同时ShequhuodongServiceImpl类调用ShequhuodongDao类中的方法对数据库进行操作。
ShequhuodongController类里面的成员函数query()实现社区活动查询功能，实现思路为进行查询操作时需要调用ShequhuodongController类里面的方法query()，首先在该方法中创建了一个条件构造器对象ew，调用ew对象中的方法allEq()查询所有的社区活动信息，然后调用shequhuodongService对象中的selectView()方法查询到目标社区活动，最后返回社区活动查询结果。
成员函数add()实现添加社区活动功能，实现思路为进行添加操作时需要调用ShequhuodongController类里面的方法add()，首先在该方法中创建了社区活动对象shequhuodong和HttpServletRequest对象，接受前端发来的请求，调用shequhuodong对象中的方法setId()根据方法里面的参数来获取当前社区活动的发布时间和添加活动的基本详情，然后调用shequhuodongService对象中的insert()方法将新增的社区活动信息加入数据库表中，最后返回社区活动新增信息。
成员函数update()实现修改社区活动信息功能，主要实现思路为进行修改操作时需要调用ShequhuodongController类里面的方法update()，首先在该方法中创建了社区活动对象shequhuodong和HttpServletRequest对象，接受前端发来的目标活动修改请求，接着调用shequhuodongService对象中的updateById(shequhuodong)方法将找到该活动信息，并对信息项进行修改，最后将修改后的社区活动信息结果返回页面中。
成员函数detail()实现查看社区活动详情功能，主要实现思路为进行查看社区活动详情操作时需要调用ShequhuodongController类里面的方法detail(@PathVariable("id") Long id)，根据方法里面的参数查找目标id的社区活动信息，然后在该方法中创建社区活动对象shequhuodong，接着调用shequhuodongService对象中的selectById(id)方法在数据库中根据id找到要查看的活动信息，最后将查询到的活动详情信息和数据结果返回页面中。
社区活动模块所涉及到的类之间的关系如图3-2所示。
 
图3-2 社区活动类图
3.3.3社区车位模块界面设计
社区车位界面的设计思想：社区车位界面主要由上方搜索栏、下方内容区两部分组成。社区用户可以通过在上方的搜索框输入车位名称或者在下拉列表中选则车位位置、车位状态查询社区车位信息，也可以直接在该页面选择某个车位进行查看具体内容，同时社区用户进入详情界面后可以租用这个社区车位等。
1.上方搜索栏包括的控件有编辑框，两个下拉列表和按钮，其中编辑框中显示车位名称四个字，提示用户输入车位名称，一个下拉列表显示请选择车位位置，另一个下拉列表显示请选择车位状态，而按钮上是查询两个字，用户点击查询按钮进行车位的搜索。
2.下方内容区主要是放置社区车位信息，包括的控件有图片按钮以及列表框等。其中图片按钮是放置社区活动的图片，列表框则是显示所有的社区车位，所有的社区车位均是上下水平放置。
用户可以在社区车位界面浏览不同的车位信息，对车位进行租用，还可以通过搜索框进行社区车位的精准搜索。社区车位界面设计如图3-3所示。
 
图3-3社区车位界面设计图
3.3.4社区车位管理模块功能设计
社区车位模块具体的功能设计如下：
1.社区用户可以在社区车位页面显示车位信息的列表界面中查看所有的社区车位信息，可以通过在上方的搜索框输入自己想要搜索信息的关键词，还可以在下拉列表中选择车位位置或者车位状态，点击查询按钮进行搜索，然后选择某个社区车位信息可以查看该车位详情。
2.在查看某个车位详细信息的过程中遇到想要租用且空闲社区车位时，用户可以点击租用，对该车位进行租用，对车位租用信息进行查询，在审核通过后，可以对车位租用进行取消，对取消租用信息进行查询以及查看审核情况。
3.物业管理员对社区车位信息进行增、删、查、改操作。所谓的增删查改是物业管理员添加或修改某一个社区车位的车位名称、车位位置、车位状态、车位介绍等，删除就是对社区车位进行单个或批量删除。还可以审核和管理社区用户的车位租用信息、取消租用信息。
社区车位模块主要由ShequcheweiEntity、ShequcheweiController、ShequcheweiService、ShequcheweiServiceImpl和ShequcheweiDao这五个类构成，ShequcheweiController类中定义了对社区车位的修改、对社区车位的添加、对社区车位的删除、对社区车位的查找等方法，ShequcheweiController类中的方法分别调用ShequcheweiService类中对应的方法，ShequcheweiService类中的方法分别调用ShequcheweiServiceImpl类中对应的实现方法对社区车位进行相对应操作，同时ShequcheweiServiceImpl类调用ShequcheweiDao类中的方法对数据库进行操作。
ShequcheweiController类里面的函数成员query()实现社区车位查询功能，实现思路为进行查询操作时需要调用ShequcheweiController类里面的方法query()，首先在该方法中创建了一个条件构造器对象ew，调用ew对象中的方法allEq()查询所有的社区车位信息，然后调用shequcheweiService对象中的selectView()方法查询到目标社区车位，最后返回社区车位查询结果。
成员函数add()实现添加社区车位功能，实现思路为进行添加操作时需要调用ShequcheweiController类里面的方法add()，首先在该方法中创建了社区车位对象shequchewei和HttpServletRequest对象，接受前端发来的请求，调用shequchewei对象中的方法setId()根据方法里面的参数来获取当前社区车位的发布时间和添加车位信息，然后调用shequcheweiService对象中的insert()方法将新增的社区车位信息加入数据库表中，最后返回社区车位新增信息。
成员函数update()实现修改社区车位信息功能，主要实现思路为进行修改操作时需要调用ShequcheweiController类里面的方法update()，首先在该方法中创建了社区车位对象shequchewei和HttpServletRequest对象，接受前端发来的目标车位修改请求，接着调用shequcheweiService对象中的updateById(shequchewei)方法将找到该活动信息，并对信息项进行修改，最后将修改后的社区车位信息结果返回页面中。
成员函数detail()实现查看社区车位详情功能，主要实现思路为进行查看社区车位详情操作时需要调用ShequcheweiController类里面的方法detail(@PathVariable("id") Long id)，根据方法里面的参数查找目标id的社区车位信息，然后在该方法中创建社区车位对象shequchewei，接着调用shequcheweiService对象中的selectById(id)方法在数据库中根据id找到要查看的车位信息，最后将查询到的车位详情信息和数据结果返回页面中。
社区车位模块所涉及到的类之间的关系如图3-4所示。
 
图3-4 社区车位类图

3.4 团队协作记录
 
 
4 项目进度
4.1 项目进度表
日期	核心
阶段	当日关键任务	责任人	协作节点（需三人配合）	当日目标成果
	任务拆解	1. 对照课程要求梳理项目核心功能（如数据统计工具的录入、计算、导出）2. 拆分 3 个核心任务，确定每人分工	A/B/C	课后 30 分钟（教室 / 图书馆）线下讨论	完成《任务拆分清单》，明确每人职责
	各自攻坚	1. A：搭建代码基础框架（如数据计算模块的初始代码结构）2. B：绘制界面初稿（如 Excel 表格布局 / 简单页面草图）3. C：创建进度记录表（记录三人每日进度）	A/B/C	晚上微信群同步进度（每人 1 条简短反馈）	A：代码框架；B：界面初稿；C：进度表
	各自攻坚	1. A：编写数据计算核心代码（实现基础计算逻辑，如求和、平均值）2. B：优化界面设计（调整布局，确保操作便捷）3. C：每日记录 A/B 进度，初步检查代码 / 设计是否符合要求	A/B/C	每晚微信群同步进度，遇问题 1 小时内响应	A：完成 70% 计算代码；B：确定最终界面；C：完整进度记录
	各自攻坚	1. A：完善代码，修复初步测试中的小问题（如计算结果格式错误）2. B：准备界面所需素材（如表格标题、按钮图标）3. C：整理前 6 天成果，标注待解决的疑问	A/B/C	周日晚微信群汇总疑问，确定周末整合计划	A：代码初步完成（无明显 bug）；B：素材准备完毕；C：疑问清单
	整合测试	1. A+B 配合：将代码与界面整合（如实现 Excel 数据导入代码计算功能）2. C：模拟使用场景测试，记录首次测试 bug	A/B/C	周末 2 小时（图书馆）线下集中整合	完成首次整合，输出《bug 记录清单》
	整合测试	1. A：修复核心功能 bug（如计算结果错误）2. B：配合调试界面适配问题（如数据显示错位）3. C：二次测试，确认 bug 是否解决	A/B/C	晚上微信群同步 bug 修复进度	核心 bug 全部解决，项目可正常运行
	成果完善	1. A：补充代码注释（每段核心代码标注功能）2. B：优化界面细节（调整字体大小、颜色搭配）3. C：整理所有文件（代码、设计稿、测试记录）	A/B/C	每晚微信群确认完善进度	A：注释完成；B：界面优化完毕；C：文件整理初版
	成果完善与提交	1. 三人共同核对：文件完整性（无遗漏）、命名合规性（按课程要求）2. C：最终打包文件，确认提交格式3. 一人负责提交（如上传教学平台）	A/B/C	课后 1 小时线下 / 线上共同核对	确认最终文件包无误
	成果完善与提交	1. 检查提交状态（确认平台已接收）2. 若有问题（如文件损坏），及时补传3. 简单记录项目完成情况（可选）	A/B/C	微信群同步提交结果	项目成功提交，无遗留问题


4.2  人员决策
分工主导 + 协作确认：各阶段任务责任人（如 A 负责代码、B 负责设计）优先提出方案，另外两人需在规定时间内反馈，无异议则按方案执行；有分歧时共同讨论，以 “2 票同意即可通过” 为原则（避免 1 人反对导致停滞）。
效率优先：简单决策（如界面颜色调整、代码注释格式）可线上快速确认；复杂决策（如功能简化、进度调整）需线下碰面讨论，单次讨论不超过 30 分钟（避免过度纠结）。
责任绑定：决策结果由三人共同承担，若因决策失误导致问题（如功能遗漏），需一起调整，不单独追责。
各阶段具体决策机制
对应进度表阶段	决策场景	决策主体	决策流程	决策时限
第 1 天（任务拆解）	1. 核心功能优先级排序（如 “先做计算功能，再做导出功能”）2. 分工调整（如 A 想换设计任务，B 愿接代码任务）	三人共同决策	1. 先各自提出功能排序 / 分工想法（每人 1 分钟陈述）2. 对比想法差异，聚焦 “哪个方案更省时间、更匹配三人技能”3. 投票确定，2 票同意即定案	线下讨论 30 分钟内完成
第 2-7 天（各自攻坚）	1. A：代码技术选型调整（如原用 Python，想换 Java）2. B：界面设计风格变更（如原简约风，想换多彩风）3. C：进度记录方式优化（如原备忘录，想换在线表格）	任务责任人主导，另外两人确认	1. 责任人在微信群说明 “变更原因 + 影响”（如 “A：换 Java 更熟练，能省 1 天时间”）2. 另外两人需反馈 “是否同意”“有无潜在问题”（如 “B：换 Java 不影响我设计，同意”）3. 若 2 人同意，责任人按新方案执行；若 1 人反对，需说明反对理由（如 “C：换 Java 可能导致后期整合困难”），再共同找折中方案	线上沟通 1 小时内完成
第 8-9 天（整合测试）	1. 整合失败解决方案（如代码与界面无法对接，是改代码还是改界面）2. bug 优先级排序（如 “先修计算错误，再修界面错位”）3. 测试时间延长（如原计划 2 小时，需加 1 小时）	三人共同决策	1. 先由问题相关责任人说明情况（如 “A：改代码需 30 分钟，B：改界面需 15 分钟”）2. 一起判断 “哪个方案更快、对后续阶段影响小”3. 若讨论 10 分钟无结果，默认 “听任务直接相关人建议”（如代码界面对接问题，听 A 和 B 的）	线下整合时即时完成
第 10-12 天（成果完善）	1. A：代码注释详略程度（如 “只注核心函数，还是每段都注”）2. C：文件整理分类方式（如 “按‘代码 / 设计 / 测试’建文件夹，还是按‘日期’建”）	任务责任人主导，另外两人确认	1. 责任人提出具体方案（如 “A：只注核心函数，能省 1 小时”）2. 另外两人反馈 “是否符合课程要求”（如 “老师要求代码全注释，需补充”）3. 若符合要求，按责任人方案来；若不符合，一起调整（如 “A 补充次要代码注释”）	线上沟通 30 分钟内完成
第 13-14 天（成果提交）	1. 提交文件完整性确认（如 “是否要加项目说明文档”）2. 提交平台选择（如老师给了 2 个平台，传哪个）3. 补传决策（如文件上传失败，是当天补传还是次日补传）	三人共同决策	1. C 先列出 “待确认项清单”（如 “1. 缺项目说明；2. 平台选 A 还是 B”）2. 三人快速核对课程要求（如 “老师没说要说明文档，可省”）3. 投票选平台 / 补传时间，2 票同意即执行	线上核对 1 小时内完成

特殊情况决策（如突发问题）
突发场景	决策机制
1 人临时无法参与（如 A 生病，当天不能写代码）	1. 另外两人先在微信群确认 “A 的任务进度”（如 “A 已完成 70% 代码，剩 30%”）2. 讨论 “谁临时接手部分任务”（如 “B：我能接 10% 简单代码，C：我帮 A 检查已写代码”）3. 待 A 回归后，三人一起衔接任务，不让进度滞后
课程要求临时变更（如老师加了 “数据可视化” 功能）	1. 三人先判断 “新增功能是否能在剩余时间完成”2. 若能完成：快速分工（如 “A 加可视化代码，B 加图表设计”）；若不能：一起找老师说明情况（如 “剩余 3 天，加功能会导致提交延迟，能否简化”）
决策后发现错误（如选了不熟练的技术，导致进度滞后）	1. 不纠结 “谁的错”，先讨论 “如何补救”（如 “换回原技术，加班 1 小时补进度”）2. 调整后，由 C 记录 “决策失误原因”（如 “下次选技术前，先确认三人是否都熟练”），避免再犯

 
5 项目周报
第 1 周：需求梳理与分工确认
本周工作内容
本周核心任务是明确项目需求边界与团队分工。首先，三人共同对照课程要求，梳理出项目核心功能模块：消费者端需包含用户注册、登录、密码重置、商品浏览、筛选搜索、购物车管理、结算支付；商家端需支持商品上架、库存修改、订单查看；管理员端需实现用户权限管理与数据统计。随后，结合三人技能特长讨论分工：学生 A 擅长 Java，负责后端代码开发；学生 B 熟悉 Vue，承担前端界面设计与开发；学生 C 文字整理能力较强，负责需求文档编写、进度记录及后续测试辅助。同时，三人还收集了项目所需资源，如 Spring Boot、Vue 的开发教程，以及电商平台参考案例，为后续开发做准备。
关键决策事项
功能优先级决策：针对 “先开发消费者端还是商家端” 的问题，三人讨论后一致同意优先开发消费者端核心功能（注册、登录、商品浏览、购物车），因这是用户使用的基础，且完成后可快速搭建项目雏形，后续再推进商家端与管理员端，该决策以 “2 票同意” 通过（无反对意见）。
分工调整决策：初始学生 C 想尝试部分前端开发，但经沟通，学生 B 对 Vue 更熟练，且 C 的文档整理能力更适配项目前期需求，最终确定现有分工，线下讨论 30 分钟内达成一致。
遇到的问题
对部分功能的技术实现难度预估不足，比如结算支付模块的逻辑流程，三人暂时无法确定具体开发方案，需进一步查阅资料或咨询老师。
三人课后时间难以完全同步，比如 A 周三有社团活动，B 周五需补课，导致线下讨论时间需频繁调整。
下周计划
学生 A：研究结算支付模块的技术方案，确定后端开发技术栈（Spring Boot+MySQL），并搭建后端基础项目框架。
学生 B：设计消费者端核心界面原型（注册页、登录页、商品列表页、购物车页），确定前端设计风格（简约电商风）。
学生 C：编写详细的需求分析文档，明确每个功能的需求细节与验收标准，并创建线上进度记录表（用腾讯文档），约定每日同步进度。
备注
已建立项目微信群，约定每晚 20:00-20:30 通过文字或语音同步当日进度，避免因时间不同步导致信息滞后。

第 2 周：需求文档编写与基础框架搭建
本周工作内容
本周聚焦需求文档完善与项目基础框架搭建。学生 C 主导完成需求分析文档编写，详细记录了每个功能的需求细节：比如用户注册需支持手机号 / 邮箱验证，密码重置需通过短信 / 邮件发送验证码；商品浏览需支持按分类、价格排序，筛选搜索需包含关键词搜索与多条件筛选；同时针对消费者、商家、管理员三类用户，分别编写子模块需求，确保每类用户的核心需求都清晰呈现，文档初稿完成后经 A、B 审核补充，最终形成定稿。
学生 A 完成后端基础框架搭建：配置 Spring Boot 项目环境，集成 MySQL 数据库，设计后端目录结构（controller、service、dao、entity 层），并编写用户实体类（User）与商品实体类（Product），定义基本属性（如用户 ID、用户名、密码；商品 ID、名称、价格、库存）。
学生 B 完成消费者端核心界面原型设计：用 Figma 绘制注册页、登录页、商品列表页、购物车页的界面初稿，采用简约电商风（主色调为浅蓝色，字体统一为微软雅黑），界面包含导航栏、搜索框、商品卡片、购物车图标等基础元素，初稿完成后与 A、C 沟通，调整了商品卡片的布局（从横向排列改为纵向排列，更符合手机端浏览习惯）。
关键决策事项
需求文档细节决策：针对 “用户注册是否需要实名认证” 的问题，三人讨论后确定暂时不加入实名认证，因课程项目侧重功能实现，而非合规性要求，且加入会增加开发复杂度，该决策由 C 主导，A、B 无异议，线上沟通 1 小时内完成。
技术栈确认决策：学生 A 提出后端用 Spring Boot+MySQL，前端用 Vue+Element UI（Element UI 有现成的电商组件，可节省开发时间），B、C 确认该技术栈适配项目需求，且两人对 Element UI 有基础了解，可配合开发，最终确定技术栈，A 主导沟通，1 小时内达成一致。
遇到的问题
数据库设计初期，学生 A 在设计用户表与商品表时，对字段类型选择存在疑问（如用户手机号用 varchar 还是 bigint，商品价格用 decimal 还是 double），需进一步确认数据类型的适配性。
学生 B 设计的购物车页面，在 “商品数量修改” 的交互逻辑上，A、B 存在分歧：A 认为应先修改数量再更新总价，B 认为实时更新总价更友好，暂时未达成一致。
下周计划
学生 A：解决数据库字段类型疑问，完成用户表、商品表的创建，编写基础的 CRUD 接口（用户注册、登录、商品查询接口）。
学生 B：确定购物车页面的交互逻辑，完成前端界面的静态开发（用 Vue+Element UI 实现注册页、登录页、商品列表页的静态布局）。
学生 C：整理本周进度，更新线上进度记录表，同时开始研究测试用例设计方法，为后续测试做准备。
备注
周末线下碰面 1 次（2 小时，图书馆），集中讨论了数据库字段类型与购物车交互逻辑问题，最终确定手机号用 varchar（避免因前面带 0 导致数据丢失），商品价格用 decimal（确保精度）；购物车页面采用实时更新总价的逻辑，符合用户使用习惯。

第 3 周：数据库设计优化与前端静态开发
本周工作内容
本周核心任务是数据库设计优化与前端静态开发。学生 A 完成数据库的详细设计：创建核心数据表（用户表 user、商品表 product、购物车表 cart、购物车项表 cart_item、订单表 order、支付表 payment），定义各表字段与主键、外键关联（如 cart 表关联 user_id，cart_item 表关联 cart_id 与 product_id）；同时考虑到数据的关联性与未来的查询效率，对部分表进行数据冗余优化 —— 比如在 cart_item 表中增加商品名称、价格字段（原本需关联 product 表查询），减少联表查询次数，确保数据结构规范化的同时提高查询效率，数据库设计完成后，用 Navicat 生成表结构文档，共享给 B、C 确认。
学生 B 完成前端核心界面的静态开发：用 Vue+Element UI 实现注册页、登录页、商品列表页、购物车页的静态布局，添加基础样式（如导航栏固定顶部、商品卡片 hover 效果、按钮点击反馈）；同时根据 A 设计的数据库表结构，调整前端表单字段（如注册页表单包含用户名、手机号、密码、确认密码字段，与 user 表字段对应），确保前端数据提交格式与后端接口适配。
学生 C 更新进度记录表，跟踪 A、B 的开发进度，发现两人均按计划推进，无明显滞后；同时开始编写测试用例初稿，针对用户注册、登录功能，设计测试场景（如正确输入、手机号格式错误、密码长度不足、重复注册），明确测试步骤与预期结果。
关键决策事项
数据库冗余优化决策：学生 A 提出在 cart_item 表中增加商品名称、价格字段时，C 担心会导致数据不一致（如商品价格修改后，cart_item 表中的价格未同步），三人讨论后确定设计触发器 —— 当 product 表中的商品价格修改时，自动更新 cart_item 表中对应商品的价格，确保数据同步，该决策由 A 主导，B、C 确认无问题，线上沟通 30 分钟内完成。
前端界面风格决策：学生 B 在商品列表页尝试两种设计风格（卡片式、列表式），经三人投票，2 票同意选择卡片式（更直观，能展示商品图片、名称、价格、销量等信息），确定最终风格。
遇到的问题
学生 A 在编写商品查询接口时，发现多条件筛选（如按价格区间 + 分类筛选）的 SQL 语句编写难度较大，测试多次仍无法正确查询数据。
学生 B 开发的登录页，在不同浏览器（Chrome、Edge、Safari）中显示效果不一致，Safari 浏览器中按钮样式出现偏移。
下周计划
学生 A：解决多条件筛选 SQL 语句问题，完成用户注册、登录接口的编写与测试，确保接口能正常返回数据（如注册成功返回用户 ID，登录成功返回 token）。
学生 B：修复登录页在 Safari 浏览器中的样式问题，完成购物车页面的静态开发，实现商品数量修改、删除商品的静态交互。
学生 C：完善测试用例，覆盖商品查询、购物车操作功能，同时协助 A 测试后端接口（用 Postman 发送请求），记录接口测试结果。
备注
已预约下周周三下午的实验室工位，可使用多浏览器测试前端界面，同时方便咨询实验室老师解决 SQL 语句问题。

第 4 周：后端接口开发与前端动态交互实现
本周工作内容
本周重点推进后端接口开发与前端动态交互实现。学生 A 解决了多条件筛选 SQL 语句问题（咨询老师后，使用 MyBatis 的动态 SQL 标签实现多条件拼接），完成用户注册、登录接口的编写与测试：注册接口支持手机号 / 邮箱验证，若手机号已存在则返回 “该手机号已注册” 提示；登录接口验证用户名与密码，正确则生成 token 返回。同时，A 还编写了商品查询接口（支持按分类、价格区间、关键词筛选）、购物车添加 / 修改 / 删除接口（如添加商品到购物车时，判断商品是否已存在，存在则更新数量，不存在则新增），所有接口均用 Postman 测试通过，确保能正常接收请求与返回数据。
学生 B 修复了登录页在 Safari 浏览器中的样式问题（添加浏览器兼容 CSS 代码），并实现前端与后端的动态交互：通过 Axios 发送请求，完成用户注册功能（表单提交后调用后端注册接口，接收返回结果并提示用户）、登录功能（输入用户名密码后调用登录接口，登录成功后跳转到商品列表页）、商品列表页数据渲染（调用商品查询接口，将返回的商品数据渲染到卡片中）；同时实现购物车页面的动态交互，点击 “添加到购物车” 按钮时调用购物车添加接口，修改商品数量时调用购物车修改接口，删除商品时调用购物车删除接口，确保前端操作能同步到后端数据。
学生 C 协助 A 测试后端接口，用 Postman 测试了所有接口的正常场景与异常场景（如注册时手机号格式错误、登录时密码错误、购物车添加不存在的商品），记录测试结果，发现 2 个小问题（登录接口未对密码进行加密处理、购物车修改数量时未判断库存），反馈给 A 后已修复；同时更新测试用例，补充接口测试的场景与预期结果。
关键决策事项
密码加密决策：学生 C 发现登录接口未加密密码后，三人讨论确定使用 BCrypt 加密算法对密码进行加密存储（注册时加密，登录时解密验证），因 BCrypt 安全性较高，且 Spring Boot 有现成的加密工具类，该决策由 A 主导，B、C 无异议，线上沟通 20 分钟内完成。
库存判断逻辑决策：针对购物车修改数量时未判断库存的问题，A 提出两种方案：一是修改时直接提示 “库存不足”，二是自动将数量调整为最大库存，三人投票选择第一种方案（更直观，用户可明确知道库存情况），2 票同意通过。
遇到的问题
前端调用后端接口时出现跨域问题（浏览器提示 CORS 错误），导致无法正常获取数据，需配置跨域解决方案。
商品列表页的多条件筛选功能，前端传递的筛选参数与后端接口接收的参数格式不匹配（如前端传递 “价格区间” 为字符串，后端需要整数），导致筛选功能无法正常使用。
下周计划
学生 A：配置后端跨域解决方案（添加 CORS 配置类），修复商品筛选参数格式不匹配问题，同时编写订单创建、结算支付接口（简化版，模拟支付成功场景）。
学生 B：测试跨域问题是否解决，确保所有动态交互功能正常；完成订单确认页、支付页的静态开发与动态交互，实现订单创建功能（购物车结算时调用订单创建接口）、支付功能（点击 “支付” 按钮时调用支付接口，支付成功后跳转到订单详情页）。
学生 C：测试前端所有动态交互功能，重点测试跨域修复后的数据同步情况与订单、支付功能，记录测试问题；同时开始整理项目文档（接口文档、开发文档）。
备注
下周将增加线下讨论频次，计划周三、周五各碰面 1 次（1 小时，图书馆），集中解决跨域与参数格式问题，确保项目功能按计划推进。

第 5 周：订单支付功能开发与项目整合测试
本周工作内容
本周核心任务是订单支付功能开发与项目整合测试。学生 A 完成后端跨域配置（添加 CORS 配置类，允许前端域名访问），修复了商品筛选参数格式不匹配问题（将后端接口接收的价格区间参数改为字符串类型，再转换为整数）；同时编写订单创建接口（接收购物车选中的商品数据，创建订单并生成订单号）、结算支付接口（模拟支付流程，支付成功后更新订单状态为 “已支付”，并清空购物车中已结算的商品），所有接口测试通过后，更新接口文档，标注接口的请求参数、返回参数与调用示例。
学生 B 测试跨域问题已解决，所有动态交互功能恢复正常；完成订单确认页、支付页的静态开发（订单确认页显示选中的商品、总金额、收货地址，支付页显示订单号、支付金额、支付方式选择），并实现动态交互：购物车结算时调用订单创建接口，生成订单后跳转到订单确认页；点击 “支付” 按钮时调用支付接口，支付成功后跳转到订单详情页（显示订单状态、商品信息、支付时间），同时实现订单列表页功能（调用订单查询接口，展示用户所有订单及状态）。
学生 C 组织项目整合测试，三人共同测试了从用户注册、登录、商品浏览、筛选、添加购物车、结算、支付到查看订单的完整流程，模拟真实用户使用场景，发现 3 个问题（订单确认页未显示收货地址编辑功能、支付成功后未发送通知、订单列表页未按时间排序），反馈给 A、B 后已修复；同时整理项目文档，完成接口文档（包含所有接口的请求方式、参数、返回结果）、开发文档（包含项目结构、技术栈、开发流程）的编写，文档定稿后共享给两人确认。
关键决策事项
收货地址功能决策：针对订单确认页未显示收货地址编辑功能的问题，三人讨论后确定暂时实现 “添加默认收货地址” 功能（简化版，用户可填写姓名、手机号、地址，保存为默认地址），因课程项目侧重核心流程，复杂的地址管理（如多地址切换、地址修改）可后续优化，该决策 2 票同意通过。
订单排序逻辑决策：订单列表页未按时间排序，A 提出按 “订单创建时间倒序” 排列（最新订单在最前面），符合用户查看习惯，B、C 无异议，确定该排序逻辑，线上沟通 15 分钟内完成。
遇到的问题
支付成功后模拟发送通知（短信 / 邮件）时，因没有第三方通知接口，无法实现真实通知功能，需改为前端弹窗提示 “支付成功”。
项目整合测试时发现，多个用户同时操作时（如两个用户同时购买同一件商品），会出现超卖问题（库存为 1，却卖出 2 件），需添加并发控制逻辑。
下周计划
学生 A：添加支付成功后的前端弹窗提示，解决超卖问题（添加数据库乐观锁，确保库存修改时的并发安全），同时优化代码，补充详细的代码注释（每个接口、核心方法都标注功能与参数说明）。
学生 B：优化前端界面细节（如订单详情页的样式调整、弹窗提示的美观度优化），确保所有页面在不同浏览器中显示一致；同时测试并发场景下的功能稳定性（如多次快速点击 “购买” 按钮）。
学生 C：整理所有项目文件（代码、文档、测试用例），按课程要求格式命名（如 “小型电商平台原型 - 代码”“小型电商平台原型 - 文档”），同时准备项目演示视频（录制核心功能的操作流程），为提交做准备。
备注
已确认课程项目提交要求：需提交完整代码、项目文档、演示视频，提交截止时间为第 6 周周五，三人约定第 6 周周三完成所有准备工作，周四进行最终核对，周五提交。

第 6 周：项目完善、核对与提交复盘
本周工作内容
本周重点是项目完善、最终核对与提交复盘。学生 A 完成支付成功后的前端弹窗提示功能（在支付接口返回成功后，前端调用弹窗组件提示 “支付成功，订单已创建”），并添加数据库乐观锁解决超

